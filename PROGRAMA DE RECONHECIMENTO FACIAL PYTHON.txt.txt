import cv2  ## importa a biblioteca #########

video_capture = cv2.VideoCapture(0)   #### CAPTURA A WEBCAM ######

################# CAMINHOS DA BIBLIOTECA JA INCLUSA ##############################################
faceCascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml') 
eyeCascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')
smileCascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_smile.xml')
###################################################################################################

while True:   ###ENQUANTO FOR VERDADEIRO  CAPTURA O FRAME DA CAMERA####
    ret, frame = video_capture.read()

 ###################IDENTIFICAÇÃO DO ROSTO EM UMA ESCALA DE CINZA ############
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    faces = faceCascade.detectMultiScale(
        gray,
        scaleFactor=1.1,
        minNeighbors=5,
        minSize=(30, 30)
    )
###############################################################################
    for (x, y, w, h) in faces:### CRIA UM QUADRADO NA FACE #####
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

    eyes = eyeCascade.detectMultiScale(gray, 1.2, 18)#### CRIA QUADRADO NOS OLHOS###
    for (x, y, w, h) in eyes:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)

    smiles = smileCascade.detectMultiScale(gray, 1.7, 20) ### CRIA QUADRADO NO SORRISO #####
    for (x, y, w, h) in smiles:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 0, 255), 2)

    cv2.imshow('video', frame) ### CAPTURA O FRAME

    if cv2.waitKey(1) & 0xFF == ord('q'): ### SE NAO APERTAR A TECLA CONTINUA MOSTRANDO######
        break

video_capture.release()
cv2.destroyAllWindows()